{"meta":{"title":"SpaceSword","subtitle":"a team of young minds","description":null,"author":"Team SpaceSword","url":"http://spacesword.github.io"},"pages":[{"title":"About","date":"2017-11-08T23:45:19.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"about/index.html","permalink":"http://spacesword.github.io/about/index.html","excerpt":"","text":"About Us: Amit Chambial Hello Everyone, I am Amit Chambial the founder and author of this blog.I am student and developer. My focus is now on all things HTML , CSS , JAVSCRIPT .I am also working to contribute to open-source software on GitHub.This is my attempt to learn more about hosting a blog online and to overcome all the obstacles that will come in his way. Deven Sharma Hi I am Deven Sharma student of National Institute of technology Hamirpur.Iam basically a Competitive programmer and a Java Developer.I Basically interested inC/C++,Java ,CSS ,HTML.This blog is for the learners and creative people. Kartik Verma Hi! I am Kartik Verma a computer science student at NIT, Hamirpur. I love …reading technical stuff, solving brainstorming problems, learning new technologies and …‘Programming’ (surprise surprise). My Hobbies are playing chess, listening music, watching movies and sometimes wandering with my friends @ NIT campus. About This Blog:SpaceSword is a blog for those who wants Mobile Tricks, Technology Hacks and here we provides you some Internet Tricks and Hacks etc. Here you will find Tech Hacks, Tricks, Online Security Tips, New Ways to Utilize Technology Resources and lot more. In short this blog is for Geeks &amp; Computer Worms, who wants to be up to date before others. We work hard to serve you first and best of all and to satisfy your hunger of Technology. Thanks To all Visitors and followers to support us to grow. This Blog spacesword.tk is a Guide for people for providing them Education, How to and Daily Tips and not to harm any Rights. I Hope You will Get Useful Information and Helpful Tips &amp; Tricks. If you have difficulity in any topic or doubt in mind. Just Feel Free to ask me in comment of that topic. If you require any more information or have any questions about our privacy policy, please feel free to contact us by email at spacesword.official@gmail.com"},{"title":"Search","date":"2017-11-10T08:39:13.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"search/index.html","permalink":"http://spacesword.github.io/search/index.html","excerpt":"","text":""}],"posts":[{"title":"Learn to code ","slug":"Why-you-should-learn-to-code-even-if-you-are-a-non-Tech-Person","date":"2018-01-09T21:47:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2018/01/10/Why-you-should-learn-to-code-even-if-you-are-a-non-Tech-Person/","link":"","permalink":"http://spacesword.github.io/2018/01/10/Why-you-should-learn-to-code-even-if-you-are-a-non-Tech-Person/","excerpt":"","text":"In this post, I would like to talk about why you should learn to code and where to start. Introduction In today’s world when I see around, I see that almost every person irrespective of what they are, where they live, what they do are surrounded by some kind of technology. It may be your smartphone, a laptop, desktop, a smart watch, a smart tv running android on it, a smart home… and what not, the list is endless. Today almost every thing involves technology in one way or the other. Some of the best technologies that are growing exponentially now a days are: Internet of things (IoT) Artificial Intelligence (AI) Robotics Augumented Reality Virtual Reality and a lot more. This is just a couple of fields where the growth is tremendous. So, have you ever wondered how all these things work? How they make your life so much easier. I mean, today you can see things that nobody would have thought about in the past. So, how this all came. Well, the answer to all this is, Computer Programming. In recent years, programming has become one of the hottest topics in the world. It used to be a thing of the highly qualified engineers, scientists, researchers in the past. But now, anyone can learn to code. Even if you don’t know to write in English you can learn coding! Why learn to code?Some of the compelling reasons about why one should learn to code are: Increase problem solving abilityIn programming you have to solve problems that require you think out of the box. You have to develop solutions to the problems that no one have thought of before. It is a constantly growing industry and brings challanges to you almost on a daily basis. This helps you to dive deep into a problem and think differently to arrive at the solution.(Learn more) Easy to learnTo some people it may look like completely foreign topic. They may find it difficult to learn to code. But trust me it is a child’s play to learn to code. (Yes, I am Serious. Learn more) Make more moneyToday the Programming industry is one of the fastest growing industries in the world and also in India. People in India are becoming more skillful in technology. Jobs like Technical Writing, Web development, Android development, Data Science, Machine Learning Engineer, IoT Engineer are among the highest paying jobs. They require highly skilled people to make their user experience smooth. These are some of the reasons, I can think of about why you should learn to code? Where can you start?There are many sources which provide you free courses and tutorials on programming. Some of them are listed as under: Codeacademy It provides a series of free tutorials on the basic web programming like HTML, CSS and some programming languages like Python, Ruby, etc. FreeCodeCamp FreeCodeCamp is for those who want to learn to start out with web development. It is perfect for beginners as you start from HTML, CSS that require no prior programming experience. Tutorials Point Tutorials Point provides tutorials on different topics for quickly getting an overview of the programming language, and various topics in programming. It provides a good reference to any of your query. Udacity Udacity provides you a series of short video lectures on various topics starting from beginning to the advanced level. But most of its courses are paid, however you can access them individually as free courses.(I personally prefer it.) Edx Edx is an alternative to udacity, but it provides its courses for free to the geeks and learners. Udemy Udemy is a paid site. But provides its lectures at very low cost. If you want to learn more about programming or have any queries regarding this article you can contact me at spacesword.official@gmail.com","categories":[],"tags":[]},{"title":"10 Must-Have Apps on Ubuntu Right After a Fresh Install","slug":"AppforLinux","date":"2018-01-08T23:58:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2018/01/09/AppforLinux/","link":"","permalink":"http://spacesword.github.io/2018/01/09/AppforLinux/","excerpt":"","text":"Here’s the situation: it’s your first time using Ubuntu, you’ve gone through as many newbie Linux tricks as you could find, but you’re still wondering what kind of software is out there for you to install. Maybe you’re even starting to feel a bit overwhelmed. Don’t worry. Relax. Compared to Windows, Linux is a vast new world full of exciting possibilities — but there’s a lot of familiarity as well. Using free software,a you can replicate many of the everyday tasks that you just can’t go without. So if you’re looking at a fresh installation of Ubuntu and feeling a bit lost, here are the first few applications you should install. These will cover most of your needs, guaranteed. Tweak ToolsBy default, Ubuntu doesn’t provide a lot of flexibility when it comes to customizing your desktop experience. You can do things like change your wallpaper, use different fonts for your system, and install different window themes, but not much more than that. If you want nitty-gritty access to some of the more advanced settings hidden beneath the hood of your system, you’ll want to install a tweak tool. The one you choose will depend on your desktop environment. For Unity desktops: You should install Unity Tweak Tool, which is available in the Software Center. This will let you change the behavior of windows and settings beyond what Unity normally allows. For Gnome desktops: You should install Gnome Tweak Tool, which can also be found in the Software Center. Advanced tweaks include custom keyboard shortcuts, altered window behaviors, and fine-grain theme controls. For Compiz desktops: Compiz isn’t a desktop environment per se, but rather a window manager that allows for 3D effects and animations. If you decide to use Compiz for window management, you should install Compiz Config Settings Manager from the Software Center. Compiz is far more advanced than the other tweak tools above, which means it might be overwhelming at first. Be careful not to change things unless you know what they are, otherwise you may break something. Synaptic Package ManagerExcept for the tweak tools above, I’m convinced that there’s no tool more important for Ubuntu users than Synaptic Package Manager. Sure, the built-in Ubuntu Software Center is good enough to get the job done, but it has a few quirks and missing features. On the other hand, Synaptic is objectively better. For starters, it isn’t as laggy when browsing through packages, and it’s way faster at returning search results. It can repair broken package dependencies, perform smart system upgrades, and has a friendlier interface. Plus, it has a setting for automatically deleting packages after installation, which helps alleviate unnecessary disk space usage. Ubuntu Software Center doesn’t have this feature. How to install: Synaptic Package Manager can be found in the Software Center. Google Chromeyou need to have Chrome installed. Not that you have to use it as your primary browser — Opera is my browser of choice at the moment — but there are things Chrome can do that no other browser can (without a lot of tinkering and tweaking, at least).For example, if you want to watch Netflix on Linux, you pretty much have to use Chrome now. There are potential workarounds for other browsers like Firefox and Opera, but they’re a real headache to get working. Up-to-date Flash support is also only available in Chrome.How to install: Chrome isn’t available in the Software Center, but installation is easy. Just go to the Chrome homepage, click Download, make sure you select the relevant .deb file, and double-click it after it’s downloaded to install. Once installed, it will auto-update when new versions are available. GearyThere are several Linux desktop email clients to choose from, and the best one for you is the one you find most comfortable to use, but Geary gets my vote. It’s clean, fast, easy to use, and aesthetically pleasing. The basic-but-functional interface makes it a “lowest common denominator” email client. You’ll understand how to use it as soon as you open it. As such, it’s the one I most recommend for Linux newbies and casual users. The only downside to Geary is that it lacks a lot of customization options. If you want to change the hotkeys, you can’t. If you want to disable “Mark as Read after X seconds”, you can’t. Little things that are completely subjective but might be frustrating all the same, so I don’t recommend Geary for power users. How to install: Geary is not available in the Software Center. To install, open the Terminal and type in the following three commands:12345sudo add-apt-repository ppa:yorba/ppasudo apt-get updatesudo apt-get install geary VLC Media PlayerSurprisingly enough, there are a lot of great media players on Linux: Bomi, SMPlayer, Miro, and the list goes on. But while it’s nice to have such a wide variety of options, there’s one player that consistently outranks its competition, and that player is VLC. The biggest selling point of VLC is its commitment to the open source philosophy. Obviously it isn’t the only open source media player out there, but when you also consider just how feature-complete, polished, and downright useful it is, you’ll see that few others can compare. There are so many hidden VLC features that you probably don’t know about. (Seriously, so many features.) At the very least, you should install it as a backup player because it always works. How to install: VLC can be found in the Software Center. TixatiHere at MakeUseOf, we don’t condone the pirating of software or media. However, we do recognize that there are legitimate uses for torrenting, and when you find yourself needing to download one of those legal torrents, it’s best if you do so with a proper client.Fortunately, the selection of modern torrent clients for Linux is wide and ever-improving. You’ve probably heard of Transmission, Deluge, and qBittorrent, but I really want to stress that Tixati is the absolute best client available right now. Reasons to prefer Tixati over other torrenting clients include: tiny resource comsumption, fast downloads, simple and straightforward interface, and dozens of features like priorities, bandwidth sizing, and real-time bandwidth graphs. It even has a portable version. How to install: Tixati isn’t available in the Software Center, but installation is easy. Just go to the Tixati homepage, click Download, navigate to the Linux section, and make sure you select the relevant .deb file. Double-click the downloaded file to install. Sublime TextOne of the worst Linux myths is that only programmers should care about Linux. This myth does a disservice to the operating system because there’s a lot to like about Linux even if you’ve never seen or written a line of code in your life. That being said, it’s undeniable that Linux is great for programmers, and if you’re going to be doing any kind of programming or scripting at all, then you should really consider installing Sublime Text. It’s the best text editor out there and almost as good as an IDE. How to install: Sublime Text is not available in the Software Center. To install, open the Terminal and type in the following three commands:1234sudo add-apt-repository ppa:webupd8team/sublime-text-3sudo apt-get updatesudo apt-get install sublime-text-installer GIMPA lot of programs have tried to replicate the power and flexibility of Photoshop, and while a lot of these programs can pass as viable alternatives to Photoshop on Linux, they all fall short in one way or another. The closest thing you’ll find is GIMP. But here’s the thing: GIMP may not be at the same level as Photoshop, it can still do a lot of the same things. If GIMP is missing a feature you need, you might even be able to extend its functionality with plugins. And best of all, GIMP is 100% free. Would you rather pay a subscription for Adobe Creative Cloud? Likely not. If you think GIMP is overkill or too hard to learn, don’t worry. Just check out these websites with GIMP tutorials and these video tutorials for GIMP beginners to get started. It’s easier than you think.How to install: GIMP can be found in the Software Center. DropboxIt is one Of the cloud storage services available today, Dropbox is the easiest to set up on Linux. If you’ve never used Dropbox before, then you really should — it’s excellent for backing up files, not to mention the creative uses for Dropbox that you haven’t considered. Dropbox integrates well into Linux, and once it’s set up, you never have to fiddle with it again if you don’t want to. Everything just works, and that kind of comfort is great for Linux newbies. If you’re going to use Dropbox, take advantage of these ways to unlock more space as well as these time-saving Dropbox shortcuts. If security bothers you, take these steps towards safer cloud storage and avoid these bad security habits. Then you’ll have nothing to worry about. How to install: Dropbox is available in the Software Center, but I’ve run into installation issues before, so I recommend going to the Dropbox download page instead and grabbing the .deb file relevant to your system. Double-click it to install once downloaded. SteamLinux is becoming a serious platform for gaming. It hasn’t gotten there yet, but it’s well on its way, and there’s a lot of evidence to show that Linux may catch up to Windows in just a few more years. One of the biggest milestones? The release of Steam for Linux. Steam is one of the best ways to download games on Linux. The library of games is expansive, the community is massive, and the games themselves are pretty darn good. Not all of the games on Steam can be played just yet, but the number that can be played is growing day by day, and Steam itself is always improving too. For now, you’ll have to deal with the fact that many games — such as these free MMORPGs that are native to Linux — will have to be played outside of Steam.How to install: Steam can be found in the Software Center. However, you may run into problems after installation, in which case you should consult this troubleshooting page.","categories":[{"name":"Open Source","slug":"Open-Source","permalink":"http://spacesword.github.io/categories/Open-Source/"},{"name":"Linux","slug":"Open-Source/Linux","permalink":"http://spacesword.github.io/categories/Open-Source/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://spacesword.github.io/tags/Linux/"}]},{"title":"Different Linux Distros according to you!","slug":"Different-Linux-Distros-according-to-you","date":"2018-01-08T04:03:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2018/01/08/Different-Linux-Distros-according-to-you/","link":"","permalink":"http://spacesword.github.io/2018/01/08/Different-Linux-Distros-according-to-you/","excerpt":"","text":"Linux Distros:According To You!For SysAdmin: ParrotAdministrators are tasked with so much on a daily basis. Without a solid toolkit, that job becomes incredibly challenging. For that, there are a host of Linux distributions ready to serve. I believe the one distribution that will find a significant rise in popularity for the coming year will be Parrot Linux. This particular distribution is based on Debian and offers nearly every penetration testing tool you could possibly want. You will also find tools for cryptography, cloud, anonymity, digital forensics, programming, and even productivity. All of these tools (and there are many) are coupled with an already rock-solid foundation to create a Linux distribution perfect for the security and network administrator Download Lightweight Distribution: LXLEWithout a doubt, I believe LXLE will become the lightweight distribution of choice in 2017. Why? Simple. LXLE manages to combine a perfect blend of small footprint with large productivity. In other words, this is a small-sized distribution that won’t stop you from getting your work done. You’ll find all the tools you need in a desktop Linux release that will feel right at home on older hardware (as well as newer machines). LXLE is based on Ubuntu 16.04 (so it will enjoy long-term support) and makes use of the LXDE window manager, which brings with it an instant familiarity. LXLE ships with many of the standard tools (such as LibreOffice and GIMP). The only caveat is the need to install a more modern (and up-to-date browser). Download Desktop Distribution: Elementary OSI may be biased, but I’m certain that Elementary OS Loki will do the impossible and usurp Linux Mint from the coveted “best desktop distribution” for 2017. That will be a fairly impressive feat, considering that Linux Mint consistently clobbers the competition on Distrowatch. Currently, Elementary OS stands at #6 (where Linux Mint continues its reign at the number one spot). How is it possible that Elementary OS could de-throne Mint? Loki has not only proved itself to be one of the more beautiful Linux distributions, it is also rock solid and offers an unmatched user-friendliness and consistency across the desktop. Some might find the Elementary OS desktop to be too “Mac-like.” However, that metaphor has proved incredibly effective with end users and, of course, the Elementary take on the design isn’t nearly as limiting as is the OS X desktop…so feel free to tweak it to your liking. Download For IoT: Snappy Ubuntu Core Now we’re talking really, really small form factor. The Internet of Things category is where embedded Linux truly shines, and there are a number of distributions ready to take on the task. I believe 2017 will be the year of Snappy Ubuntu Core. Ubuntu Snaps have already made it incredibly easy to install packages without worrying about dependencies and breakage due to upgrades. By leveraging this system, Snappy Core makes for a perfect platform for IoT. Ubuntu Snappy Core can already be found in the likes of various hacker boards (such as the Raspberry Pi) as well as Erle-Copter drones, Dell Edge Gateways, Nextcloud Box, and LimeSDR. Non-Enterprise Server Distribution: CentOS It should come as no surprise here that CentOS remains the Linux darling of the server room for small- and medium-sized businesses. There’s a very good reason CentOS continues to stand at the top of this hill—it’s derived from the Red Hat Enterprise Linux (RHEL) sources. Because of this, you know you are getting as reliable a server platform as you can find. The major difference between Red Hat Enterprise Linux and CentOS (besides the branding) is support. With RHEL, you benefit from official Red Hat support. On the contrary, since 2004, CentOS has enjoyed a massive community-driven support system. So, if your small- or medium-sized business is looking to migrate a data center to an open source platform, your first stop is CentOS. Download Enterprise Server Distribution: RHELOnce again, there is no surprise here. SUSE is doing a remarkable job of climbing the enterprise ladder and one of these days they will usurp the reigning king of enterprise Linux from the throne. Unfortunately, 2017 will not be that year. Red Hat Enterprise Linux (RHEL) will continue to top the most wanted list for enterprise businesses. According to Gartner, Red Hat has a 67 percent market share within the realm of Linux (with RHEL subscriptions driving about 75 percent of Red Hat’s revenue). The reasons for this are many. Not only is Red Hat perfectly in tune with what enterprise business needs, they also are major contributors to nearly every software stack within the open source community. Red Hat knows Linux, and they know enterprise. Red Hat is trusted by numerous Fortune 500 companies (such as ING, Sprint, Bayer Business Services, Atos, Amadeus, and Etrade) and RHEL has managed to push many envelopes far and wide in areas of security, integration, cloud, and management. I also look for Red Hat to focus a good amount of energy on IoT in the coming year. Even still, don’t be surprised if, by the end of 2017, SUSE further chips away at the current Red Hat market share. Download Gaming:Steam OSSteam OS is one of the most popular gaming distros, developed by Valve Corp. – the creator of Steam. Steam OS is developed for running games from the Steam Store.Steam OS supports various Graphics Cards and Joysticks/Gamepads. If by chance, driver for your hardware is not included out-of-box you can always manually set that up.If you are a hardcore Steam fan and own a machine that meets the requirements Steam OS is without doubt for you. Download Artist Musians and Editors:Ubuntu StudioUbuntu Studio offers more than just one app for every category, so you’ll find both Darktable and Rawtherapee for RAW photo editing, Kdenlive, Pitivi, and Openshot for video editing, and a long list of audio tools, including complete workstations like Ardour and Rosegarden. Among the most interesting apps is Synfig Studio in which you can make your own high-quality 2D animations. Download Hacking:Kali LinuxDeveloped by Offensive Security as the rewrite of BackTrack, Kali Linux distro tops our list of the best operating systems for hacking purposes. This Debian-based OS comes with 600+ preinstalled pen testing tools that make your security toolbox richer. These versatile tools are updated regularly and are available for different platforms like ARM and VMware. For a forensic job, this top hacking operating system comes with a live boot capability that provides a perfect environment for vulnerability detection. Now Kali Linux is based on a rolling release model Download","categories":[{"name":"Open source","slug":"Open-source","permalink":"http://spacesword.github.io/categories/Open-source/"},{"name":"Linux","slug":"Open-source/Linux","permalink":"http://spacesword.github.io/categories/Open-source/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://spacesword.github.io/tags/Linux/"}]},{"title":"Dynamic Programming","slug":"Dynamic-Programming","date":"2018-01-07T23:30:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2018/01/08/Dynamic-Programming/","link":"","permalink":"http://spacesword.github.io/2018/01/08/Dynamic-Programming/","excerpt":"","text":"DP Dynamic Programming As it is said that “Those who could not remember the past are condemned to repeat it”. Dynamic Programming is one of the most beautiful form of algorithm .Its an intution based technique.In this we reduce the exponential complexity to the polynomial complexity.This artical actually focuces on the understanding of the dynamic programming not the algorithm. What my approach is that i want to develop the intution of the dynamic programming.First we need to develop the recursive algorithm and then the bottom up approach.Understanding is must in the dynamic programming not learnig the algorithm . Approaches to dynamic programmingTopdown Approach In this approach we start building the recursive solution i.e we move to the base case and then start building the solution its not exact definition but just for the understanding Bottom up Approach We try to develop the iterative solution MEMOIZATION NOT MEMORIZATION Memoization ensures that a method doesn’t run for the same inputs more than once by keeping a record of the results for the given inputs. Lets see an example: 1234567891011121314151617 # include &lt;iostream&gt; using namespace std;int fib(int n )&#123;if(n==0 || n==1 )return 1;elsereturn fib(n-1)+fib(n-2);&#125;int main() &#123; fib(5); &#125; ///output produced is as 5 Lets see how does the memoization work Now see here above fib(1) and fib(0) is calculated 4 and 3 times respectively so we can precompute their result and store that result and when we want to use that result we just need to return that value.Once calculated we do not need to calculate that result again and again. 123456789101112131415161718192021 # include &lt;bits/stdc++.h&gt;using namespace std;int dp[100];//array for storing the resultint fib(int n)&#123; if(dp[n]!=-1)//check if array is filled or not if filled then return the result return dp[n]; else if(n == 0 || n==1) return n; else return fib(n-1)+fib(n-2); dp[n]=n;&#125; int main()&#123; memset(dp,-1 ,sizeof(dp)); cout&lt;&lt;fib(10);&#125; HOW DOES THIS WORK State in Dynamic Programming The state in dp is one of the most important thing once you can generate the state then you can easily solve the dynamic programming question The “State” is actually the way of defining the solution to the sub problem.We need to break the problem to smaller states and then solve them. Overlapping Subproblem We have the overlapping subproblem means we are computing the same solution again and again as above in fibonacci program . Optimal substructue If an optimal solution can be constructed from optimal solutions of its subproblems is called as optimal substructure. As above in the diagram we are not moving greedily we are also considering each path very carefully this is optimal substructure.Not taking the 2’s path We are considering the path from 5 to 20 = 25 , 2+25=27 ,11+17=28. How to know whether the problem is related to Dynamic programming? In the most of the cases you are asked to maximize or minimize the solution in that case you need to use the dynamic programming.The mathematics play a great role in the dynamic programming you need to form the formulae for the realtion among the states Lets see one of the questions of SPOJ for better understanding.ACPC10D - Tri graphs Here’s a simple graph problem: Find the shortest path from the top-middle vertex to the bottom-middle vertex in a given tri-graph. A tri-graph is an acyclic graph of (N ≥ 2) rows and exactly 3 columns. Unlike regular graphs, the costs in a tri-graph are associated with the vertices rather than the edges. So, considering the example with N = 4, the cost of going straight down from the top to bottom along the middle vertices is 7 + 13 + 3 + 6 = 29. The layout of the directional edges in the graph are always the same as illustrated in the figure. InputYour program will be tested on one or more test cases.Each test case is specified using N + 1 lines where the first line specifies a single integer (2 ≤ N ≤ 100, 000) denoting the number of rows in the graph. N lines follow, each specifying three integers representing the cost of the vertices on the ith row from left to right. The square of each cost value is less than 1,000,000.The last case is followed by a line with a single zero. OutputFor each test case, print the following line:k. nWhere k is the test case number (starting at one,) and n is the least cost to go from the top-middle vertex to the bottom-middle vertex. ExampleInput:4 13 7 5 7 13 6 14 3 12 15 6 16 0 Output: 22 SOLUTION: a[][] as INPUT array and dp[][] as the minimum distance array. As from above we are asked to minimize the distance to move from a[0][1] to to a[n][1].Think yourself and try to deduce the formula.This needs a simple logic. As we cannot move from a[0][0] so it will remain as it is but not at a[0][1] , we can move to four indecies i.e But the first row is special case in out dp[][] array we will put its first row as it is except d[0][2]=a[0][1]+a[0][2]; NOTE: a[i][j] represent path from i to j.Index Starts from zero. For better understanding see the image carefully below So what the formula becomes: dp[1][0]=a[1][0]+min(dp[0][1],dp[0][0]) dp[1][1]= a[1][1]+min(dp[0][0],dp[1][0],dp[1][1],dp[0][2]) dp[1][2]=a[1][2]+min(dp[0][2],dp[0][1],dp[1][1]) Lets see the ImplementationC++ code: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485# include &lt;bits/stdc++.h&gt;# define ll long long using namespace std;ll mini(ll x ,ll y ,ll z);//for minimum of three elementsll mini(ll x,ll y,ll z ,ll k)//for minimum of four&#123; ll max=ULONG_MAX; if(x&lt;=y) max=x; else max=y; ll max2=ULONG_MAX; if(k&gt;=z) max2=z; else max2=k; if(max2&gt;=max) return max; else return max2;&#125;ll mini(ll x ,ll y ,ll z)&#123;ll max=ULONG_MAX; if(x&gt;=y) max=y; else max=x; if(max&gt;=z) return z; else return max;&#125;int main()&#123; ll cntr=0; while(1) &#123; ll n; cin&gt;&gt;n; if(n==0) break; ++cntr; //counter variable ll a[n+1][3]; ll cost[n+1][3]; for(ll i= 0 ;i&lt; 3 ;i++) &#123; for( ll j= 0 ; j&lt;n ; j++) cost[i][j]=0; &#125; for(ll i =0 ; i&lt; n ; i++) &#123; for( ll j= 0 ;j&lt; 3 ;j++ ) scanf(\"%lld\",&amp;a[i][j]); &#125; cost[0][0]=LONG_MAX; cost[0][1]=a[0][1]; cost[0][2]=a[0][1]+a[0][2]; for(ll i =1 ; i&lt; n ;i++) &#123; for(ll j =0 ; j&lt; 3 ;j++) &#123; if(j==0) &#123; cost[i][0]=a[i][0]+min(cost[i-1][0],cost[i-1][1]); &#125; else if(j==1) &#123; cost[i][1]=a[i][1]+mini(cost[i-1][0],cost[i][0],cost[i-1][1],cost[i-1][2]); &#125; else &#123; cost[i][2]=a[i][2]+mini(cost[i][1],cost[i-1][2],cost[i-1][1]); &#125; &#125; &#125; printf(\"%lld.\",cntr); printf(\" %lld\\n\",cost[n-1][1]);//cost[n-1][1] as started index from zero&#125;&#125; Article by :Deven Sharma","categories":[],"tags":[]},{"title":"Why Linux Over Windows?","slug":"Why-Linux-Over-Windows","date":"2017-12-31T11:34:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2017/12/31/Why-Linux-Over-Windows/","link":"","permalink":"http://spacesword.github.io/2017/12/31/Why-Linux-Over-Windows/","excerpt":"","text":"Free of Cost Let’s say you purchase a new computer at around INR30k. Then you go on to spend around another INR8k for Windows 10 Home (or INR15k for Pro). Even if it comes bundled with the computer, it’s not really free - you’ve had to pay for it. On the other hand, Ubuntu (and most Linux distros) as free of cost. So, you can save that money legally (i.e without having to ‘steal’ the OS). RobustI’ve never had to reinstall Ubuntu because it got ‘corrupted’. Also, you must be all too familiar with Blue Screen of Death which happens with most Windows users often. I’ve never faced it with Ubuntu. SecureYou don’t have to worry about virus attacks or things like spyware or adware as they’re all directed towards Windows users. Just install AdBlock Plus to turn off the ads (which is required on all OS anyway thanks to the amount of ads online). Ease of UseContrary to popular belief, Ubuntu (and few other popular distros like Fedora, Mint &amp; Debian) is very easy to use. Personally, I find Windows as bit cumbersome now as with every iteration, they make just too many changes - even when they add no increase in functionality.\\Also, if you wish to do something like convert JPG to PDF, you can do it by typing 3 words instead of having to install a 20MB software. Size The Ubuntu DVD is a mere 1GB. A clean install takes around 2.5-3GB on your HDD as compared to 20GB for Windows 7 (I haven’t installed Win 8 or later on my own computer so can’t say). Also, this 3GB includes the bundled office suite (LibreOffice)! So, if you to use Windows, you’d end up using 25GB of HDD for just the OS, office suite, PDF reader, a usable web-browser, a bit-torrent client, etc. All these things are packed with Ubuntu already. So, as soon as you install the OS, you’re good to get down to work. FreedomOn Linux, the user is the most powerful person. If you were to use Windows, certain activities wouldn’t be allowed. No so on Linux where you can do as you please - even if it means asking the OS to delete itself.\\Also, you get plenty of different ways to get your job done the way you like, thanks to the Terminal. Free &amp; Open Source (FOSS)It may or may not be an important thing for you. Being FOSS, it means that you’re free to make any changes to the OS you like and distribute it (but not for profit). It also means that as there are many people contributing to the code, any malicious code gets caught and fixed - there is nobody like Microsoft spying on you. CustomizationYou can customize the entire OS as you wish. Don’t like the windows manager? Get a new one! Don’t like a bundled software? Purge it! Want to change some system code? Go ahead! No matter what you do, you would continue to be supported. So, it’s great for both end-users &amp; developers. CommunityUbuntu has a fairly large user-base. So, you can get easy &amp; quick help from places like Ask Ubuntu or Ubuntu Forums. However, if you play lots of games, you might have to stick to Windows. There are lots of games available now, and you can play other popular ones thanks to Steam. Windows games can be run via Wine (but won’t run the same). So, if you’re a hard-core gamer, just see if the games you play are on Ubuntu yet. I will soon be posting on different linux distros and which to choose..","categories":[{"name":"Open Source","slug":"Open-Source","permalink":"http://spacesword.github.io/categories/Open-Source/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://spacesword.github.io/tags/Linux/"}]},{"title":"Variation in c11","slug":"Variation-in-c11","date":"2017-11-13T07:49:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2017/11/13/Variation-in-c11/","link":"","permalink":"http://spacesword.github.io/2017/11/13/Variation-in-c11/","excerpt":"","text":"C++ is growingWe all feel that writing the code in the c++ is very difficult compared to python but now the c++ is even becoming more easier as compared to the earlier c. Now we can actually excess the array in some different way. 123456789101112# include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123;int n;cin&gt;&gt;n;int *a =new int[n];for(int i =0 ; i&lt; n; i++)cin&gt;&gt;a[i];//older c++ for(int j= 0 ;j&lt; n ;j++)cout&lt;&lt;a[j]&lt;&lt;endl;&#125; But now it has changed as array of type int and size 5 but remains static 12345678910 # include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123; array &lt;int,5&gt;a;//array of size 5; for(int i =0 ;i&lt;5; i++) cin&gt;&gt;a[i]; for(auto &amp;i :a)//modern c11 way to printing auto iterator cout&lt;&lt;i&lt;&lt;endl;&#125;","categories":[],"tags":[{"name":"C++","slug":"C","permalink":"http://spacesword.github.io/tags/C/"},{"name":"Competitive Programing","slug":"Competitive-Programing","permalink":"http://spacesword.github.io/tags/Competitive-Programing/"}]},{"title":"Vectors in c++","slug":"ectors-in-c","date":"2017-11-13T07:34:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2017/11/13/ectors-in-c/","link":"","permalink":"http://spacesword.github.io/2017/11/13/ectors-in-c/","excerpt":"","text":"Vectors IntroductionVector is a template class that is a perfect replacement for the good old C-style arrays. It allows the same natural syntax that is used with plain arrays but offers a series of services that free the C++ programmer from taking care of the allocated memory and help operating consistently on the contained objects. The first step using vector is to include the appropriate header:1#include &lt;vector&gt; Note that the header file name does not have any extension; this is true for all of the Standard Library header files. The second thing to know is that all of the Standard Library lives in the namespace std. This means that you have to resolve the names by prepending std:: to them:1std::vector&lt;int&gt; v; // declares a vector of integers For small projects, you can bring the entire namespace std into scope by inserting a using directive on top of your cpp file:1234#include &lt;vector&gt;using namespace std;//...vector&lt;int&gt; v; // no need to prepend std:: any more This is okay for small projects, as long as you write the using directive in your cpp file. Never write a using directive into a header file! This would bloat the entire namespace std into each and every cpp file that includes that header. For larger projects, it is better to explicitly qualify every name accordingly. I am not a fan of such shortcuts. In this article, I will qualify each name accordingly. I will introduce some typedefs in the examples where appropriate—for better readability. Now, what is std::vector v;? It is a template class that will wrap an array of Ts. In this widely used notation, ‘T’ stands for any data type, built-in, or user-defined class. The vector will store the Ts in a contiguous memory area that it will handle for you, and let you access the individual Ts simply by writing v[0], v[1], and so on, exactly like you would do for a C-style array. Note that for bigger projects it can be tedious to repeatedly write out the explicit type of the vectors. You may use a typedef if you want:12345typedef std::vector&lt;int&gt; int_vec_t; // or whatever you // want to name it//...int_vec_t v;Do not use a macro! 1#define int_vec_t std::vector&lt;int&gt; ; // very poor style! For the beginning, let’s see what a vector can do for us. Let’s start small and take the example of an array of integers. If you used plain arrays, you had either a static or a dynamic array:12345678910size_t size = 10;int sarray[10];int *darray = new int[size];// do something with them:for(int i=0; i&lt;10; ++i)&#123; sarray[i] = i; darray[i] = i;&#125;// don't forget to delete darray when you're donedelete [] darray; Let’s do the same thing using a vector:12345678910#include &lt;vector&gt;//...size_t size = 10;std::vector&lt;int&gt; array(size); // make room for 10 integers, // and initialize them to 0// do something with them:for(int i=0; i&lt;size; ++i)&#123; array[i] = i; // no need to delete anything&#125; As you see, vector combines the advantages of both the static and the dynamic array because it takes a non-const size parameter such as the dynamic one and automatically deletes the used memory like the static one. Declaring a 2D vectorYou can declare the 2D vector and initialize with some specific valueeg.123456789# include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123;int n,m;cin&gt;&gt;n&gt;&gt;m;vector &lt; vector &lt;int &gt; &gt; V(n,vector&lt;int &gt;(m,-1));//created a vector V of order nXm and intialize with -1 &#125;","categories":[],"tags":[{"name":"C++","slug":"C","permalink":"http://spacesword.github.io/tags/C/"},{"name":"Competitve Programing","slug":"Competitve-Programing","permalink":"http://spacesword.github.io/tags/Competitve-Programing/"}]},{"title":"Git Tutorial","slug":"Git-Tutorial","date":"2017-11-13T00:56:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2017/11/13/Git-Tutorial/","link":"","permalink":"http://spacesword.github.io/2017/11/13/Git-Tutorial/","excerpt":"","text":"SetupFor Windows :Download Git Bash For Windows For Mac Os :Download Git For Mac For Linux :If you want to install the basic Git tools on Linux via a binary installer, you can generally do so through the basic package-management tool that comes with your distribution. If you’re on Fedora for example, you can use yum:1$ sudo yum install git-all If you’re on a Debian-based distribution like Ubuntu, try apt-get:1$ sudo apt-get install git-all For more options, there are instructions for installing on several different Unix flavors on the Git website, at http://git-scm.com/download/linux. Create a new repositorycreate a new directory, open it and perform agit initto create a new git repository. add &amp; commitYou can propose changes (add it to the Index) using12git add &lt;filename&gt; git add * to add whole directory:12git add .git add --all This is the first step in the basic git workflow. To actually commit these changes use1git commit -m &quot;Commit message&quot; Now the file is committed to the HEAD, but not in your remote repository yet. Pushing ChangesYour changes are now in the HEAD of your local working copy. To send those changes to your remote repository, execute1git push origin master Change master to whatever branch you want to push your changes to. If you have not cloned an existing repository and want to connect your repository to a remote server, you need to add it with1git remote add origin &lt;server&gt; Now you are able to push your changes to the selected remote server update &amp; mergeTo update your local repository to the newest commit, execute1git pull in your working directory to fetch and merge remote changes.to merge another branch into your active branch (e.g. master),use1git merge &lt;branch&gt; in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with1git add &lt;filename&gt; before merging changes, you can also preview them by using1git diff &lt;source_branch&gt; &lt;target_branch&gt; Adding a remoteTo add a new remote, use the git remote add command on the terminal, in the directory your repository is stored at. The git remote add command takes two arguments: A remote name, for example, origin A remote URL, for example, https://github.com/user/repo.git For example:1git remote add origin https://github.com/user/repo.git Set a new remote1git remote -v Verify new remote 12origin https://github.com/user/repo.git (fetch)origin https://github.com/user/repo.git (push)","categories":[{"name":"Open Source","slug":"Open-Source","permalink":"http://spacesword.github.io/categories/Open-Source/"}],"tags":[{"name":"GIT","slug":"GIT","permalink":"http://spacesword.github.io/tags/GIT/"}]},{"title":"Starting with CNNs and Deep learning competitions","slug":"Starting-with-CNNs","date":"2017-11-09T06:57:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2017/11/09/Starting-with-CNNs/","link":"","permalink":"http://spacesword.github.io/2017/11/09/Starting-with-CNNs/","excerpt":"","text":"Convolution neural networks are the state of the art deep learning algorithms in computer vision that have performed exceptionally well in the recent years and are able to achieve very high accuracy on the imagenet challenge. Not only this they have also outperformed the humans in recognizing the images accurately. In this tutorial we will use kaggle digit recognition dataset as our main dataset for training and will achieve an accuracy of greater than 95% and learn how to do it in python using well established libraries.we will use keras to create our cnn model. OverviewIn this tutorial we will learn the following: Dowloading the dataset Loading the dataset Creating the CNN model Training the model Evaluting the model Saving the predictions Downloading the datasetFirst we will download the dataset from the kaggle site. Save the downloaded files in folder.Open the files and see what you can understand. Loading the dataset12#Change to the directory in which the dataset is stored$ cd ./digitRec Our CNN model will take (1, 28, 28) images as input so we load the images and reshape them to (1, 28, 28).1234567891011121314151617181920212223242526272829#load the required modulesimport numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport matplotlib.image as imgpltfrom keras import backend as K#set the image dimesion ordering channels first or channels last#use 'th' for channels first K.set_image_dim_ordering('th')def ld():\"\"\" load the train and test files and return them as 4D array\"\"\" file_train, file_test = 'train.csv', 'test.csv' train, test = np.array(pd.read_csv(file_train), dtype='float64'), np.array(pd.read_csv(file_test), dtype='float64') sp_train = train.shape[0] sp_test = test.shape[0] Xtrain, Ytrain, Xtest = train[:, 1:], train[:, 0], test Xtrain, Xtest = Xtrain.reshape(sp_train, 1, 28, 28), Xtest.reshape(sp_test, 1, 28, 28) print(\"testing data set image: \") img1 = Xtrain[0].reshape(28, 28) img2 = Xtest[0].reshape(28, 28) plt.subplot(2, 1, 1) plt.imshow(img1) plt.subplot(2, 1, 2) plt.imshow(img2) plt.show() return Xtrain, Ytrain, Xtest save this script in file: loadDataSet.py Creating the modelLet’s start with creating a cnn model. Filters are the layers of a convolutional layer that have been found to detect edges and other general features like orientation, colors, shapes etc. our model will use 5 convolutional layers with different filter count.Usually the number of filters increase as we go deep in a network and the size of the layer decreases. Let’s start coding:1234567891011121314151617import numpy as npfrom keras.models import Sequential, Modelfrom keras.layers import Densefrom keras.layers import Dropoutfrom keras.layers import Flatten, Input, Addfrom keras.layers.convolutional import Conv2Dfrom keras.layers.convolutional import MaxPooling2Dfrom keras.utils import np_utilsfrom keras import backend as Kfrom keras.constraints import maxnormfrom keras.optimizers import SGDfrom sklearn.model_selection import train_test_splitimport loadDataSetimport keras.layersimport pandas as pdseed = 11np.random.seed(seed) Use a constant seed value so that the model and weights can be recreated.Lets use our previous script ‘loadDataSet.py’ to load the files.12print(\"loading dataset\")Xtrain, Ytrain, Xtest = loadDataSet.ld() We can do some preprocessing. Let’s center the data about the mean.this will ensure that our model does not overfit.12345Xtrain_mean = Xtrain.mean(axis = 0)Xtest_mean = Xtest.mean(axis = 0)print(\"data preprocessing\")Xtrain = Xtrain - Xtrain_meanXtest = Xtest - Xtest_mean Now, Hot encoding will convert the target variable to a matrix of 0’s and 1’s.12345print(\"hyper parmeter tuning and Hot Encoding\")Ytrain_hot_encoded = np_utils.to_categorical(Ytrain, num_classes = 10)X_train, X_test, Y_train, Y_test = train_test_split(Xtrain, Ytrain_hot_encoded, train_size=0.95)print(\"Model building\")print(\"train data shape &#123;!s&#125;\".format(Xtrain.shape)) Let’s create our cnn model. Use a function if you need a dynamic model.123456789101112131415161718192021222324252627def createModel(): print(\"creating model...\") input_shape = None if K.image_data_format() == 'channels_first': input_shape = (1, 28, 28) else: input_shape = (28, 28, 1) input_img = Input(shape=input_shape) conv2D_1a_3x3_1 = Conv2D(64, (3, 3), strides=1, padding=\"same\", activation=\"relu\")(input_img) conv2D_1b_3x3_1 = Conv2D(64, (3, 3), strides=1, padding=\"same\", activation=\"relu\")(conv2D_1a_3x3_1) maxpool_1_3x3_1 = MaxPooling2D(pool_size=(2, 2))(conv2D_1b_3x3_1) conv2D_2a_3x3_1 = Conv2D(100, (3, 3), strides=1, padding=\"same\", activation=\"relu\")(maxpool_1_3x3_1) conv2D_2b_3x3_1 = Conv2D(100, (3, 3), strides=1, padding=\"same\", activation=\"relu\")(conv2D_2a_3x3_1) maxpool_2_3x3_1 = MaxPooling2D(pool_size=(2, 2))(conv2D_2b_3x3_1) conv2D_3a_3x3_1 = Conv2D(128, (3, 3), strides=1, padding=\"same\", activation=\"relu\")(maxpool_2_3x3_1) conv2D_3b_3x3_1 = Conv2D(128, (3, 3), strides=1, padding=\"same\", activation=\"relu\")(conv2D_3a_3x3_1) maxpool_3_3x3_1 = MaxPooling2D(pool_size=(2, 2))(conv2D_3b_3x3_1) final = Flatten()(maxpool_3_3x3_1) final = Dense(512, activation=\"relu\")(final) final = Dropout(0.2)(final) final = Dense(128, activation='relu')(final) final = Dense(10, activation=\"softmax\")(final) model = Model(inputs=input_img, outputs = final) sgd = SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True) model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy', 'categorical_accuracy']) print(\"printing Model Summary...\\n&#123;!s&#125;\".format(model.summary())) return model Training the modelLet’s train the model. Use fit method and pass the data set and other required parameters. 12345model = createModel()epochs = 10print(\"Model Compilation\")print(\"training...\")model.fit(X_train, Y_train, validation_data = (X_test, Y_test), epochs=epochs, batch_size=32, shuffle=True) to save the weights use model’s save attribute. For keras, weights must be saved in HDF5 format.1model.save('digitRecWeights.h5') Evaluting the modelthis will give us three metrics defining123scrs = model.evaluate(xtrain, ytrain)print(scrs)print(\"Done!\") Saving the predictionsFrom the sample submission file we see that predictions must be in a csv file with ImageId and Label columns. Label will contain the predictions. Save your predictions in a csv file. 12345678910print(\"predicting...\")score = model.predict(Xtest, batch_size = 32)print(\"Done!\")print(\"calculating predictions ...\")pred = np.argmax(score, axis = 1)print(\"Saving predictions...\")pred = np.column_stack([np.arange(1, Xtest.shape[0]+1).reshape(-1, 1), pred])res = pd.DataFrame(pred, columns=['ImageId', 'Label'], dtype=np.int64)res.to_csv(\"final_pred.csv\", index=None)print(\"Done!...\") Phew, that was a lot, but, we finally did it! OutputRun your script and sit back. This may take some time depending upon your hardware configuration. Submiting the PredictionsNow upload your prediction file on the kaggle site. We see thatwe are able to achieve more than 95% accuracy. Though it is not as good on a trivial dataset like digit recognition but we can achieve more accuracy by tuning our model. Try different CNNs to see how they perform on our digit recognition dataset.","categories":[],"tags":[]},{"title":"MACROS KING ","slug":"MACROS-KING","date":"2017-11-09T01:59:22.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2017/11/09/MACROS-KING/","link":"","permalink":"http://spacesword.github.io/2017/11/09/MACROS-KING/","excerpt":"","text":"Macros BE THE KING OF MACROSMACROS IN C++ In a C program, all lines that start with # are processed by preprocessor which is a special program invoked by the compiler. In a very basic term, preprocessor takes a C program and produces another C program without any #. Following are some interesting facts about preprocessors in C. 1) When we use include directive, the contents of included header file (after preprocessing) are copied to the current file. Angular brackets &lt; and &gt; instruct the preprocessor to look in the standard folder where all header files are held. Double quotes “ and “ instruct the preprocessor to look into the current folder and if the file is not present in current folder, then in standard folder of all header files. 2) When we use define for a constant, the preprocessor produces a C program where the defined constant is searched and matching tokens are replaced with the given expression. For example in the following program max is defined as 100.12345678910c++#include&lt;stdio.h&gt;#define max 100int main()&#123; printf(&quot;max is %d&quot;, max); return 0;&#125;// Output: max is 100// Note that the max inside &quot;&quot; is not replaced This code below shows the use of macro like a functions as the macros but the mcros donot return any value and they are faster to excess so we can replace any statement by macro that doesnot return any value.In order to do that we need to place \\ after the statement and enclose them in the braces.at the end statement we dont need to place . 1234567891011# include &lt;bits/stdc++.h&gt;# define temp(n)\\&#123;\\for(int i =0 ;i&lt; n; i++)\\cout&lt;&lt;i&lt;&lt;endl;&#125;//macro defined faster excess for loop inside the macrousing namespace std;int main()&#123; temp(10);// macro called &#125; The C syntax only allows expressions to be separated by the comma operator (,). do … while() is not an expression, but a statement, so it is an error to use it as a value to a comma operator. Generally speaking, an inline function should be preferred over a macro to perform some inline computation. They are easier to implement, less error prone, and easier to maintain. There are very few situations where an inline function would fail where a macro would succeed. There really isn’t a safe macro to achieve your objective, but a workaround would be to pass the variable you want updated in as a macro parameter. 123456789c++#define FOO(x, y, result) \\ do &#123; \\ do &#123; \\ --x; \\ ++y; \\ &#125; while(x &gt; y); \\ result = x * y; \\ &#125; while(0)","categories":[],"tags":[]},{"title":"Competitive Programming  Basics","slug":"Competitive-Programming-Basics","date":"2017-11-09T00:55:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2017/11/09/Competitive-Programming-Basics/","link":"","permalink":"http://spacesword.github.io/2017/11/09/Competitive-Programming-Basics/","excerpt":"","text":"Taking input till the End of fileMultiple Test CasesIn a programming contest problem, the correctness of your code is usually determined byrunning your code against several test cases. Rather than using many individual test casefiles, modern programming contest problems usually use one test case file with multiple testcases included. In this section, we use a very simple problem as an example of a multiple-test-cases problem: Given two integers in one line, output their sum in one line. We willillustrate three possible input/output formats:• The number of test cases is given in the first line of the input.• The multiple test cases are terminated by special values (usually zeroes).• The multiple test cases are terminated by the EOF (end-of-file) signal.123456789101112131415#include &lt;iostream&gt;using namespace std;using ll =long long ;//one way to use the namespaces defined ll as the long long int main()&#123; //if you have the input file in case of the competitive proramming ll n; while(scanf(\"%lli\",&amp;n)!=EOF)//returns the no of the arguments &#123; //do some task &#125; &#125; Use of the fast input as fast as the scanfFast I/O for Competitive Programming2.2In competitive programming, it is important to read input as fast as possible so we save valuable time. You must have seen various problem statements saying: “Warning: Large I/O data, be careful with certain languages (though most should be OK if the algorithm is well designed)”. Key for such problems is to use Faster I/O techniques. It is often recommended to use scanf/printf instead of cin/cout for a fast input and output. However, you can still use cin/cout and achieve the same speed as scanf/printf by including the following two lines in your main() function: ios_base::sync_with_stdio(false); It toggles on or off the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first input or output operation. Adding ios_base::sync_with_stdio (false); (which is true by default) before any I/O operation avoids this synchronization. It is a static member of function of std::ios_base. cin.tie(NULL); tie() is a method which simply guarantees the flushing of std::cout before std::cin accepts an input. This is useful for interactive console programs which require the console to be updated constantly but also slows down the program for large I/O. The NULL part just returns a NULL pointer.1234567#include &lt;iostream&gt;using namespace std;using ll =long long ;//one way to use the namespaces defined ll as the long long int main()&#123;ios_base::sync_with_stdio(0);cin.tie(0);&#125;","categories":[],"tags":[{"name":"Competitive","slug":"Competitive","permalink":"http://spacesword.github.io/tags/Competitive/"}]},{"title":"Linux Terminal Tutorial","slug":"Linux-Terminal-Tutorial","date":"2017-11-08T23:39:00.000Z","updated":"2018-01-11T07:27:56.965Z","comments":true,"path":"2017/11/09/Linux-Terminal-Tutorial/","link":"","permalink":"http://spacesword.github.io/2017/11/09/Linux-Terminal-Tutorial/","excerpt":"","text":"Basics GNU/Linux Commands1. ls :list directory contents1ls if you want to see hidden files/directories(beginning with dot .),use -a flag.1ls -a To know more about ls:1man ls 2. cd:Change Directory12cd ../cd /home/Desktop . respresents the current directory..represents the parent directory~represents the home directory(of the user) 3. pwd : print the current/working directory12pwd/home/Desktop/scripts 4. mkdir : make/create directory.1mkdir my_directory 5. rm : remove/delete file/directoryIf directory useless is empty12rm file1.txtrm useless if directory useless contain files then use1rm -r useless 6. sudo : superuser do, to gain root privilege1sudo apt-get install gnome-shell Then enter your user account password, and you would be able to do administrative tasks like root. So if you’re getting any permission error using a command, then adding sudo as a prefix, might help. To use sudo with previously used command without sudo use this1sudo !! 7. mv : rename or move a file/directory1mv file1 ~/Downloads/Archive/ the above command will move the file from the current directory to target directory.1mv logo_2.jpg new_logo.jpg it will rename the file to new_logo.jpg. 8. cat : View File contents1cat install.log 10. cp : Copy Files/Directories1cp movie_name.mp4 ~/Downloads/movies/ The above command will copy the movie_name.mp4 to the specified directory. 11. Know Your Ip address1ifconfig 12. Open inbuit terminal text editor Nano1nano newfile.md 13. Compiling C/C++ Program1234g++ amit.c./a.out g++ amit.cpp./a.out a.out is the object file generated after compilation.To run this we use ./a.out Package ManagementThese are Ubuntu Specific commands. It Requires root privilege, so just add the sudo prefix before each command (it will ask for the user password and you’re done!). 14. apt-get : Command Line Tool for handling packagesThere are various options such as install – To install package.e.g Install the program PyRoom (A distraction Free Text Editor)1sudo apt-get install pyroom remove – To remove package1sudo apt-get remove kate update – To update the package cache1sudo apt-get update ####15. add-apt-repository – To add a PPA (for your favorite Application) e.g add the PPA for the App Eidete (Screencasting program)1sudo add-apt-repository ppa:shnatsel/eidete-daily After, adding the PPA, apt-get update command is required. #16. apt-cache : To access the Package details from cache search : search for the related packages in the apt-cachee.g1apt-cache search image editor use man to more about the commands","categories":[{"name":"Linux","slug":"Linux","permalink":"http://spacesword.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://spacesword.github.io/tags/Linux/"},{"name":"Terminal","slug":"Terminal","permalink":"http://spacesword.github.io/tags/Terminal/"}]}]}